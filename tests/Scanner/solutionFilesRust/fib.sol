Token { token_kind: VOID, spelling: "void", token_position: SourcePosition { line_start: 3, line_finish: 3, char_start: 1, char_end: 4 } }
Token { token_kind: ID, spelling: "main", token_position: SourcePosition { line_start: 3, line_finish: 3, char_start: 6, char_end: 9 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 3, line_finish: 3, char_start: 10, char_end: 10 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 3, line_finish: 3, char_start: 11, char_end: 11 } }
Token { token_kind: LBRACE, spelling: "{", token_position: SourcePosition { line_start: 3, line_finish: 3, char_start: 13, char_end: 13 } }
Token { token_kind: INT, spelling: "int", token_position: SourcePosition { line_start: 4, line_finish: 4, char_start: 5, char_end: 7 } }
Token { token_kind: ID, spelling: "n", token_position: SourcePosition { line_start: 4, line_finish: 4, char_start: 9, char_end: 9 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 4, line_finish: 4, char_start: 10, char_end: 10 } }
Token { token_kind: INT, spelling: "int", token_position: SourcePosition { line_start: 5, line_finish: 5, char_start: 5, char_end: 7 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 5, line_finish: 5, char_start: 9, char_end: 9 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 5, line_finish: 5, char_start: 10, char_end: 10 } }
Token { token_kind: INT, spelling: "int", token_position: SourcePosition { line_start: 6, line_finish: 6, char_start: 5, char_end: 7 } }
Token { token_kind: ID, spelling: "current", token_position: SourcePosition { line_start: 6, line_finish: 6, char_start: 9, char_end: 15 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 6, line_finish: 6, char_start: 16, char_end: 16 } }
Token { token_kind: INT, spelling: "int", token_position: SourcePosition { line_start: 7, line_finish: 7, char_start: 5, char_end: 7 } }
Token { token_kind: ID, spelling: "next", token_position: SourcePosition { line_start: 7, line_finish: 7, char_start: 9, char_end: 12 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 7, line_finish: 7, char_start: 13, char_end: 13 } }
Token { token_kind: INT, spelling: "int", token_position: SourcePosition { line_start: 8, line_finish: 8, char_start: 5, char_end: 7 } }
Token { token_kind: ID, spelling: "twoaway", token_position: SourcePosition { line_start: 8, line_finish: 8, char_start: 9, char_end: 15 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 8, line_finish: 8, char_start: 16, char_end: 16 } }
Token { token_kind: ID, spelling: "putString", token_position: SourcePosition { line_start: 10, line_finish: 10, char_start: 5, char_end: 13 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 10, line_finish: 10, char_start: 14, char_end: 14 } }
Token { token_kind: STRINGLITERAL, spelling: "How many Fibonacci numbers do you want to compute? ", token_position: SourcePosition { line_start: 10, line_finish: 10, char_start: 17, char_end: 67 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 10, line_finish: 10, char_start: 68, char_end: 68 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 10, line_finish: 10, char_start: 69, char_end: 69 } }
Token { token_kind: ID, spelling: "n", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 5, char_end: 5 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 7, char_end: 7 } }
Token { token_kind: ID, spelling: "getInt", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 9, char_end: 14 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 15, char_end: 15 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 16, char_end: 16 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 11, line_finish: 11, char_start: 17, char_end: 17 } }
Token { token_kind: IF, spelling: "if", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 5, char_end: 6 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 8, char_end: 8 } }
Token { token_kind: ID, spelling: "n", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 9, char_end: 9 } }
Token { token_kind: LTEQ, spelling: "<=", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 10, char_end: 11 } }
Token { token_kind: INTLITERAL, spelling: "0", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 12, char_end: 12 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 12, line_finish: 12, char_start: 13, char_end: 13 } }
Token { token_kind: ID, spelling: "putString", token_position: SourcePosition { line_start: 13, line_finish: 13, char_start: 8, char_end: 16 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 13, line_finish: 13, char_start: 17, char_end: 17 } }
Token { token_kind: STRINGLITERAL, spelling: "The number should be positive.\\n", token_position: SourcePosition { line_start: 13, line_finish: 13, char_start: 20, char_end: 51 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 13, line_finish: 13, char_start: 52, char_end: 52 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 13, line_finish: 13, char_start: 53, char_end: 53 } }
Token { token_kind: ELSE, spelling: "else", token_position: SourcePosition { line_start: 14, line_finish: 14, char_start: 5, char_end: 8 } }
Token { token_kind: LBRACE, spelling: "{", token_position: SourcePosition { line_start: 14, line_finish: 14, char_start: 10, char_end: 10 } }
Token { token_kind: ID, spelling: "putString", token_position: SourcePosition { line_start: 15, line_finish: 15, char_start: 7, char_end: 15 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 15, line_finish: 15, char_start: 16, char_end: 16 } }
Token { token_kind: STRINGLITERAL, spelling: "\\n\\n\\tI \\t Fibonacci(I) \\n\\t=====================\\n", token_position: SourcePosition { line_start: 15, line_finish: 15, char_start: 19, char_end: 69 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 15, line_finish: 15, char_start: 70, char_end: 70 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 15, line_finish: 15, char_start: 71, char_end: 71 } }
Token { token_kind: ID, spelling: "next", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 7, char_end: 10 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 12, char_end: 12 } }
Token { token_kind: ID, spelling: "current", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 14, char_end: 20 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 22, char_end: 22 } }
Token { token_kind: INTLITERAL, spelling: "1", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 24, char_end: 24 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 16, line_finish: 16, char_start: 25, char_end: 25 } }
Token { token_kind: FOR, spelling: "for", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 7, char_end: 9 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 11, char_end: 11 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 12, char_end: 12 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 13, char_end: 13 } }
Token { token_kind: INTLITERAL, spelling: "1", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 14, char_end: 14 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 15, char_end: 15 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 17, char_end: 17 } }
Token { token_kind: LTEQ, spelling: "<=", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 18, char_end: 19 } }
Token { token_kind: ID, spelling: "n", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 20, char_end: 20 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 21, char_end: 21 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 23, char_end: 23 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 24, char_end: 24 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 25, char_end: 25 } }
Token { token_kind: PLUS, spelling: "+", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 26, char_end: 26 } }
Token { token_kind: INTLITERAL, spelling: "1", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 27, char_end: 27 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 28, char_end: 28 } }
Token { token_kind: LBRACE, spelling: "{", token_position: SourcePosition { line_start: 17, line_finish: 17, char_start: 30, char_end: 30 } }
Token { token_kind: ID, spelling: "putString", token_position: SourcePosition { line_start: 18, line_finish: 18, char_start: 5, char_end: 13 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 18, line_finish: 18, char_start: 14, char_end: 14 } }
Token { token_kind: STRINGLITERAL, spelling: "\\t", token_position: SourcePosition { line_start: 18, line_finish: 18, char_start: 17, char_end: 18 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 18, line_finish: 18, char_start: 19, char_end: 19 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 18, line_finish: 18, char_start: 20, char_end: 20 } }
Token { token_kind: ID, spelling: "putInt", token_position: SourcePosition { line_start: 19, line_finish: 19, char_start: 9, char_end: 14 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 19, line_finish: 19, char_start: 15, char_end: 15 } }
Token { token_kind: ID, spelling: "i", token_position: SourcePosition { line_start: 19, line_finish: 19, char_start: 16, char_end: 16 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 19, line_finish: 19, char_start: 17, char_end: 17 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 19, line_finish: 19, char_start: 18, char_end: 18 } }
Token { token_kind: ID, spelling: "putString", token_position: SourcePosition { line_start: 20, line_finish: 20, char_start: 5, char_end: 13 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 20, line_finish: 20, char_start: 14, char_end: 14 } }
Token { token_kind: STRINGLITERAL, spelling: "\\t", token_position: SourcePosition { line_start: 20, line_finish: 20, char_start: 17, char_end: 18 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 20, line_finish: 20, char_start: 19, char_end: 19 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 20, line_finish: 20, char_start: 20, char_end: 20 } }
Token { token_kind: ID, spelling: "putIntLn", token_position: SourcePosition { line_start: 21, line_finish: 21, char_start: 5, char_end: 12 } }
Token { token_kind: LPAREN, spelling: "(", token_position: SourcePosition { line_start: 21, line_finish: 21, char_start: 13, char_end: 13 } }
Token { token_kind: ID, spelling: "current", token_position: SourcePosition { line_start: 21, line_finish: 21, char_start: 14, char_end: 20 } }
Token { token_kind: RPAREN, spelling: ")", token_position: SourcePosition { line_start: 21, line_finish: 21, char_start: 21, char_end: 21 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 21, line_finish: 21, char_start: 22, char_end: 22 } }
Token { token_kind: ID, spelling: "twoaway", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 5, char_end: 11 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 13, char_end: 13 } }
Token { token_kind: ID, spelling: "current", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 15, char_end: 21 } }
Token { token_kind: PLUS, spelling: "+", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 22, char_end: 22 } }
Token { token_kind: ID, spelling: "next", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 23, char_end: 26 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 22, line_finish: 22, char_start: 27, char_end: 27 } }
Token { token_kind: ID, spelling: "current", token_position: SourcePosition { line_start: 23, line_finish: 23, char_start: 5, char_end: 11 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 23, line_finish: 23, char_start: 13, char_end: 13 } }
Token { token_kind: ID, spelling: "next", token_position: SourcePosition { line_start: 23, line_finish: 23, char_start: 15, char_end: 18 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 23, line_finish: 23, char_start: 19, char_end: 19 } }
Token { token_kind: ID, spelling: "next", token_position: SourcePosition { line_start: 24, line_finish: 24, char_start: 5, char_end: 8 } }
Token { token_kind: EQ, spelling: "=", token_position: SourcePosition { line_start: 24, line_finish: 24, char_start: 13, char_end: 13 } }
Token { token_kind: ID, spelling: "twoaway", token_position: SourcePosition { line_start: 24, line_finish: 24, char_start: 15, char_end: 21 } }
Token { token_kind: SEMICOLON, spelling: ";", token_position: SourcePosition { line_start: 24, line_finish: 24, char_start: 22, char_end: 22 } }
Token { token_kind: RBRACE, spelling: "}", token_position: SourcePosition { line_start: 25, line_finish: 25, char_start: 7, char_end: 7 } }
Token { token_kind: RBRACE, spelling: "}", token_position: SourcePosition { line_start: 26, line_finish: 26, char_start: 5, char_end: 5 } }
Token { token_kind: RBRACE, spelling: "}", token_position: SourcePosition { line_start: 27, line_finish: 27, char_start: 1, char_end: 1 } }
Token { token_kind: EOF, spelling: "$", token_position: SourcePosition { line_start: 47, line_finish: 47, char_start: 1, char_end: 1 } }
